{"version":3,"sources":["images/CyberTrivia-cut.png","images/TriviaTitle2-ed.png","redux/actions/index.js","services/fetchTrivia.js","components/ConfigModal.js","pages/Login.js","components/Header.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/index.js","index.js"],"names":["module","exports","saveScore","payload","type","fetchQuestions","a","questionsAm","difficulty","category","token","endpoint","length","fetch","then","response","json","data","fetchCategories","trivia_categories","ConfigModal","state","categories","anyCategory","id","name","categoriesArr","this","setState","props","toggle","change","diff","questions","createPortal","className","size","onClick","value","onChange","map","n","key","Boolean","cat","toLowerCase","document","getElementById","React","Component","Login","handleChange","target","handleClick","history","dispatch","saveSettings","localStorage","setItem","push","validateLogin","email","toggleSettings","prev","showSettings","src","title","alt","data-testid","placeholder","autoComplete","disabled","logo","connect","Header","hash","gravatarEmail","md5","toString","url","score","player","Game","intervalFunc","intervalID","setInterval","timer","nextButton","fetchQuestion","getItem","code","response_code","removeItem","results","shuffledResults","item","shuffledQuestions","incorrect_answers","correct_answer","sort","Math","random","answer","dif","clearInterval","classInfo","handleNext","index","createMarkup","question","p","createElement","innerHTML","toUpperCase","picture","JSON","stringify","playerInfo","parse","itemIndex","qIndex","Feedback","assertions","Ranking","ranking","b","App","exact","path","component","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","window","Cypress","ReactDOM","render","basename","process"],"mappings":"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","file":"static/js/main.7cbed271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CyberTrivia-cut.e9608543.png\";","module.exports = __webpack_public_path__ + \"static/media/TriviaTitle2-ed.2372ddab.png\";","export const SAVE_USER_INFO = 'SAVE_USER_INFO';\nexport const SAVE_SCORE = 'SAVE_SCORE';\nexport const SAVE_SETTINGS = 'SAVE_SETTINGS';\nexport const ADD_IMAGE_URL = 'ADD_IMAGE_URL';\nexport const RESET_STORE = 'RESET_STORE';\n\nexport const saveUserInfo = (payload) => ({ type: SAVE_USER_INFO, payload });\n\nexport const saveScore = (payload) => ({ type: SAVE_SCORE, payload });\n\nexport const saveSettings = (payload) => ({ type: SAVE_SETTINGS, payload });\n\nexport const addImageUrl = (payload) => ({ type: ADD_IMAGE_URL, payload });\n\nexport const resetStore = () => ({ type: RESET_STORE });\n","export const fetchQuestions = async ({ questionsAm, difficulty, category, token }) => {\n  let endpoint = '';\n\n  if (difficulty.length && !category.length) {\n    endpoint = `https://opentdb.com/api.php?amount=${questionsAm}&difficulty=${difficulty}&token=${token}`;\n  }\n\n  if (!difficulty.length && category.length) {\n    endpoint = `https://opentdb.com/api.php?amount=${questionsAm}&category=${category}&token=${token}`;\n  }\n\n  if (difficulty.length && category.length) {\n    endpoint = `https://opentdb.com/api.php?amount=${questionsAm}&category=${category}&difficulty=${difficulty}&token=${token}`;\n  }\n\n  if (!difficulty.length && !category.length) {\n    endpoint = `https://opentdb.com/api.php?amount=${questionsAm}&token=${token}`;\n  }\n\n  return fetch(endpoint)\n    .then((response) => response.json())\n    .then((data) => data);\n};\n\nexport const fetchCategories = async () => {\n  return fetch('https://opentdb.com/api_category.php')\n    .then((response) => response.json())\n    .then(({trivia_categories: categoriesList}) => categoriesList);\n};\n","import React from 'react';\nimport { createPortal } from 'react-dom';\nimport { IoCloseSharp } from 'react-icons/io5';\nimport PropTypes from 'prop-types';\nimport { fetchCategories } from '../services/fetchTrivia';\nimport './ConfigModal.css';\n\nclass ConfigModal extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      categories: [],\n    };\n  }\n\n  async componentDidMount() {\n    const anyCategory = { id: '', name: 'Any Category' };\n    const categoriesArr = await fetchCategories();\n    const categories = [anyCategory, ...categoriesArr];\n    this.setState({ categories });\n  }\n\n  render() {\n    const { toggle, change, diff, category, questions } = this.props;\n    const { categories } = this.state;\n    const questionsArr = [5, 6, 7, 8, 9, 10];\n    return createPortal(\n      <main className=\"modal-overlay\">\n        <section className=\"modal-container\">\n          <div className=\"title-div\">\n            <h2>settings</h2>\n          </div>\n          <IoCloseSharp\n            size={ 40 }\n            className=\"close-button\"\n            onClick= { toggle }\n          />\n          <div className=\"options-container\">\n            <label>number of questions\n              <select\n                name=\"questions\"\n                value={ questions }\n                onChange={ change }\n              >\n                {questionsArr.map((n) => (\n                  <option key={n} value={n}>{n}</option>\n                ))}\n              </select>\n            </label>\n            <label>difficulty\n              <select\n                name=\"difficulty\"\n                value={ diff }\n                onChange={ change }\n              >\n                <option value=\"\">any difficulty</option>\n                <option value=\"easy\">easy</option>\n                <option value=\"medium\">medium</option>\n                <option value=\"hard\">hard</option>\n              </select>\n            </label>\n            <label>category\n              <select\n                name=\"category\"\n                value={ category }\n                onChange={ change }\n                className=\"category-select\"\n              >\n                {Boolean(categories.length) && categories.map((cat) => (\n                  <option key={cat.id} value={cat.id}>{cat.name.toLowerCase()}</option>\n                ))}\n              </select>\n            </label>\n          </div>\n        </section>\n      </main>,\n\n      document.getElementById('modal-root'),\n    );\n }\n}\n\nConfigModal.propTypes = {\n  toggle: PropTypes.func.isRequired,\n  change: PropTypes.func.isRequired,\n  diff: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  questions: PropTypes.number.isRequired,\n};\n\nexport default ConfigModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { resetStore, saveSettings, saveUserInfo } from '../redux/actions';\nimport { IoMdSettings } from 'react-icons/io';\nimport logo from '../images/CyberTrivia-cut.png';\nimport title from '../images/TriviaTitle2-ed.png';\nimport './Login.css';\nimport ConfigModal from '../components/ConfigModal';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n      showSettings: false,\n      difficulty: '',\n      category: '',\n      questions: 5,\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(resetStore());\n  }\n\n  handleChange = ({ target: { value, name } }) => {\n    this.setState({ [name]: value });\n  }\n\n  handleClick = () => {\n    fetch('https://opentdb.com/api_token.php?command=request')\n      .then((response) => response.json())\n      .then(({ token }) => {\n        const { history, dispatch } = this.props;\n        const { difficulty, category, questions } = this.state;\n        dispatch(saveUserInfo(this.state));\n        dispatch(saveSettings({\n          difficulty,\n          category,\n          questions\n        }));\n        localStorage.setItem('token', token);\n        history.push('/game');\n      });\n  }\n\n  validateLogin = () => {\n    const { name, email } = this.state;\n    return !(name.length && email.length);\n  }\n\n  toggleSettings = () => {\n    this.setState((prev) => ({ showSettings: !prev.showSettings }));\n  }\n\n  render() {\n    const { email, name, showSettings, difficulty, category, questions } = this.state;\n    return (\n      <main className=\"login-page\">\n        <section className=\"form-card\">\n          <img src={title} alt=\"Trivia title\" className=\"title\"/>\n          <form className=\"form\">\n            <input\n              type=\"text\"\n              className=\"name-input\"\n              data-testid=\"input-player-name\"\n              placeholder=\"TYPE YOUR NAME\"\n              name=\"name\"\n              value={ name }\n              autoComplete=\"off\"\n              onChange={ this.handleChange }\n            />\n            <input\n              type=\"email\"\n              className=\"email-input\"\n              data-testid=\"input-gravatar-email\"\n              placeholder=\"TYPE YOUR E-MAIL\"\n              name=\"email\"\n              value={ email }\n              autoComplete=\"off\"\n              onChange={ this.handleChange }\n            />\n            <button\n              type=\"button\"\n              disabled={ this.validateLogin() }\n              onClick={ this.handleClick }\n              className=\"login-button\"\n              data-testid=\"btn-play\"\n              >\n              PLAY\n            </button>\n            <IoMdSettings\n              className=\"settings-button\"\n              onClick={ this.toggleSettings }\n            />\n          </form>\n        </section>\n        <img src={logo} alt=\"CyberTrivia\" className=\"logo\"/>\n      {showSettings && <ConfigModal\n        toggle={ this.toggleSettings }\n        change={ this.handleChange }\n        diff={ difficulty }\n        category={ category }\n        questions={ +questions }\n      />}\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { addImageUrl } from '../redux/actions';\nimport './Header.css';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hash: '',\n    };\n  }\n\n  componentDidMount() {\n    const { gravatarEmail, dispatch } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    const url = `https://www.gravatar.com/avatar/${hash}`;\n    dispatch(addImageUrl(url));\n    this.setState({ hash });\n  }\n\n  render() {\n    const { hash } = this.state;\n    const { name, score } = this.props;\n    return (\n      <header className=\"header\">\n        <div className=\"img-div\">\n          <img\n            src={ `https://www.gravatar.com/avatar/${hash}` }\n            alt=\"Player avatar\"\n            data-testid=\"header-profile-picture\"\n            className=\"player-img\"\n          />\n          <p data-testid=\"header-player-name\" className=\"player-name\">\n            {' '}\n            {name}\n            {' '}\n          </p>\n        </div>\n        <p\n          data-testid=\"header-score\"\n          className=\"player-score\"\n        >\n          {`POINTS: ${score}`}\n        </p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GiHourglass } from 'react-icons/gi';\nimport Header from '../components/Header';\nimport { saveScore } from '../redux/actions';\nimport logo from '../images/CyberTrivia-cut.png';\nimport './Game.css';\nimport { fetchQuestions } from '../services/fetchTrivia';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      results: [],\n      index: 0,\n      classInfo: false,\n      timer: 30,\n      nextButton: false,\n      disabled: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestion();\n    this.intervalFunc();\n  }\n\n  componentDidUpdate() {\n    const { timer, index } = this.state;\n    const { history, name, picture, score, questionsAm } = this.props;\n    const player = { name, picture, score };\n\n    if (timer === 0) {\n      clearInterval(this.intervalID);\n    }\n    if (index === +questionsAm) {\n      if (!localStorage.getItem('ranking')) {\n        localStorage.setItem('ranking', JSON.stringify([]));\n      }\n      const playerInfo = JSON.parse(localStorage.getItem('ranking'));\n      localStorage.setItem('ranking', JSON.stringify([...playerInfo, player]));\n      history.push('/feedback');\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  intervalFunc = () => {\n    const ONE_SECOND = 1000;\n    this.intervalID = setInterval(() => {\n      const { timer } = this.state;\n      if (timer === 1) {\n        this.setState({ disabled: true, nextButton: true });\n      }\n      this.setState((prev) => ({\n        timer: prev.timer - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  fetchQuestion = async () => {\n    const token = localStorage.getItem('token');\n    const code = 3;\n    const { questionsAm, difficulty, category } = this.props;\n    const data = await fetchQuestions({ questionsAm, difficulty, category, token });\n\n    if (data.response_code === code) {\n      const { history } = this.props;\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n    const { results } = data;\n    const n = 0.5;\n    const shuffledResults = results.map((item) => ({\n      ...item,\n      shuffledQuestions: [...item.incorrect_answers, item.correct_answer]\n        .sort(() => Math.random() - n),\n    }));\n    this.setState({ results: shuffledResults });\n  }\n\n  handleClick = (answer, dif) => {\n    const { timer } = this.state;\n    clearInterval(this.intervalID);\n    this.setState({ classInfo: true, nextButton: true, disabled: true });\n    const { dispatch } = this.props;\n    if (answer === 'right') {\n      const points = 10;\n      const hard = 3;\n      const medium = 2;\n      const easy = 1;\n      switch (dif) {\n      case 'hard':\n        dispatch(saveScore(points + (timer * hard)));\n        break;\n      case 'medium':\n        dispatch(saveScore(points + (timer * medium)));\n        break;\n      case 'easy':\n        dispatch(saveScore(points + (timer * easy)));\n        break;\n      default:\n      }\n    }\n  }\n\n  handleNext = () => {\n    this.setState((prev) => ({\n      index: prev.index + 1,\n      classInfo: false,\n      timer: 30,\n      nextButton: false,\n      disabled: false,\n    }), () => this.intervalFunc());\n  }\n\n  createMarkup = (question) => {\n    const p = document.createElement('textarea');\n    p.innerHTML = question;\n    return p.value.toUpperCase();\n  }\n\n  render() {\n    const { results, classInfo, index, timer, nextButton, disabled } = this.state;\n    return (\n      <main className=\"game-page\">\n        <Header />\n        <section className=\"main-section\">\n          <section className=\"game-section\">\n            <p className=\"timer\">\n              <GiHourglass className={ disabled ? \"hourglass stop\" : \"hourglass\" }/>\n              {' '}\n              {timer}\n            </p>\n            <img src={logo} alt=\"CyberTrivia\" className=\"game-logo\"/>\n            {Boolean(results.length)\n            && (\n              results.map((item, itemIndex) => {\n                if (index === itemIndex) {\n                  return (\n                    <div key={ item.question } className=\"question-div\">\n                      <p\n                        data-testid=\"question-category\"\n                        className=\"question-category\"\n                      >\n                        {item.category}\n                      </p>\n                      <p\n                        data-testid=\"question-text\"\n                        className=\"question-text\"\n                      >\n                        {this.createMarkup(item.question)}\n                      </p>\n                      <div data-testid=\"answer-options\" className=\"answer-options\">\n                        {item.shuffledQuestions.map((question, qIndex) => {\n                          if (item.correct_answer === question) {\n                            return (\n                              <button\n                                type=\"button\"\n                                data-testid=\"correct-answer\"\n                                key=\"correct-answer\"\n                                className={ classInfo ? 'btn correct-answer' : 'btn' }\n                                onClick={ () => this.handleClick('right', item.difficulty) }\n                                disabled={ disabled }\n                              >\n                                {this.createMarkup(question)}\n                              </button>\n                            );\n                          }\n                          return (\n                            <button\n                              key={ `wrong-answer-${qIndex}` }\n                              type=\"button\"\n                              data-testid={ `wrong-answer-${qIndex}` }\n                              className={ classInfo ? 'btn wrong-answer' : 'btn' }\n                              onClick={ () => this.handleClick('wrong') }\n                              disabled={ disabled }\n                            >\n                              {this.createMarkup(question)}\n                            </button>\n                          );\n                        })}\n                      </div>\n                      <button\n                        type=\"button\"\n                        data-testid=\"btn-next\"\n                        className={ nextButton ? \"next-btn\" : \"next-btn hidden\" }\n                        onClick={ this.handleNext }\n                      >\n                        NEXT\n                      </button>\n                    </div>\n                  );\n                }\n                return '';\n              })\n            )}\n          </section>\n        </section>\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  picture: state.player.url,\n  score: state.player.score,\n  category: state.player.category,\n  questionsAm: state.player.questions,\n  difficulty: state.player.difficulty,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport './Feedback.css';\n\nclass Feedback extends React.Component {\n  render() {\n    const { assertions, score, history } = this.props;\n    const number = 3;\n    return (\n      <main className=\"feedback-page\">\n        <Header />\n        <section className=\"feedback-section\">\n          <section className=\"feedback-card\">\n            <div className=\"text-div\">\n              <p data-testid=\"feedback-text\" className=\"feedback-text\">\n                {assertions < number ? 'Could be better...' : 'Well Done!'}\n              </p>\n              <p className=\"feedback-assertions\">\n                You've got\n                {' '}\n                <span\n                  data-testid=\"feedback-total-question\"\n                >\n                  {assertions}\n                </span>\n                {' '}\n                { assertions === 1 ? \"question\" : \"questions\" } right!\n              </p>\n              <p className=\"feedback-points\">\n                <span data-testid=\"feedback-total-score\">{score}</span>\n                {' '}\n                points\n              </p>\n            </div>\n            <div className=\"btn-div\">\n              <button\n                type=\"button\"\n                onClick={ () => history.push('/') }\n                data-testid=\"btn-play-again\"\n              >\n                PLAY AGAIN\n              </button>\n              <button\n                type=\"button\"\n                onClick={ () => history.push('/ranking') }\n                data-testid=\"btn-ranking\"\n              >\n                RANKING\n              </button>\n            </div>\n          </section>\n        </section>\n      </main>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GiTrophy } from 'react-icons/gi';\nimport './Ranking.css';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('ranking')) {\n      localStorage.setItem('ranking', JSON.stringify([]));\n    }\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    ranking.sort((a, b) => b.score - a.score);\n    this.setState({ ranking });\n  }\n\n  render() {\n    const { history } = this.props;\n    const { ranking } = this.state;\n    return (\n      <main className=\"ranking-page\">\n        <GiTrophy\n          data-testid=\"ranking-title\"\n          className=\"ranking-logo\"\n          size={ 60 }\n        />\n        <section className=\"ranking-section\">\n          {ranking.map(({ picture, name, score }, index) => (\n            <div key={ picture + index } className=\"player-ranking\">\n              <div className=\"player-img-div\">\n                <img src={ picture } alt=\"Player avatar\" className=\"player-img-rk\"/>\n              </div>\n              <p data-testid={ `player-name-${index}` }>{name}</p>\n              <p data-testid={ `player-score-${index}` } className=\"rk-score\">{score}</p>\n              <div className=\"underline\"></div>\n            </div>\n          ))}\n        </section>\n        <button\n          type=\"button\"\n          onClick={ () => history.push('/') }\n          data-testid=\"btn-go-home\"\n          className=\"play-btn\"\n        >\n          PLAY AGAIN\n        </button>\n      </main>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect()(Ranking);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","import { ADD_IMAGE_URL, SAVE_SCORE, SAVE_USER_INFO, SAVE_SETTINGS, RESET_STORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  url: '',\n  category: '',\n  difficulty: '',\n  questions: 5,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_USER_INFO:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n    };\n  case SAVE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.payload,\n      assertions: state.assertions + 1,\n    };\n  case SAVE_SETTINGS:\n    return {\n      ...state,\n      category: action.payload.category,\n      difficulty: action.payload.difficulty,\n      questions: action.payload.questions,\n    };\n  case ADD_IMAGE_URL:\n    return {\n      ...state,\n      url: action.payload,\n    };\n  case RESET_STORE:\n    return {\n      ...INITIAL_STATE,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { legacy_createStore as createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}