{"version":3,"sources":["images/CyberTrivia-cut.png","images/TriviaTitle2-ed.png","redux/actions/index.js","pages/Login.js","components/Header.js","pages/Game.js","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/index.js","index.js"],"names":["module","exports","saveScore","payload","type","Login","handleChange","target","value","name","setState","handleClick","fetch","then","response","json","token","props","history","dispatch","state","localStorage","setItem","push","validateLogin","email","length","this","className","src","title","alt","data-testid","placeholder","autoComplete","onChange","disabled","onClick","logo","React","Component","connect","Header","hash","gravatarEmail","md5","toString","url","score","player","Game","intervalFunc","intervalID","setInterval","timer","nextButton","prev","fetchQuestion","getItem","data","response_code","removeItem","results","shuffledResults","map","item","shuffledQuestions","incorrect_answers","correct_answer","sort","Math","random","answer","dif","clearInterval","classInfo","handleNext","index","createMarkup","question","p","document","createElement","innerHTML","toUpperCase","picture","JSON","stringify","playerInfo","parse","Boolean","itemIndex","key","category","qIndex","difficulty","Settings","Feedback","assertions","Ranking","ranking","a","b","size","App","exact","path","component","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","window","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d2e40da3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CyberTrivia-cut.e9608543.png\";","module.exports = __webpack_public_path__ + \"static/media/TriviaTitle2-ed.2372ddab.png\";","export const SAVE_USER_INFO = 'SAVE_USER_INFO';\nexport const SAVE_SCORE = 'SAVE_SCORE';\nexport const ADD_IMAGE_URL = 'ADD_IMAGE_URL';\nexport const RESET_STORE = 'RESET_STORE';\n\nexport const saveUserInfo = (payload) => ({ type: SAVE_USER_INFO, payload });\n\nexport const saveScore = (payload) => ({ type: SAVE_SCORE, payload });\n\nexport const addImageUrl = (payload) => ({ type: ADD_IMAGE_URL, payload });\n\nexport const resetStore = () => ({ type: RESET_STORE });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { resetStore, saveUserInfo } from '../redux/actions';\nimport logo from '../images/CyberTrivia-cut.png';\nimport title from '../images/TriviaTitle2-ed.png';\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(resetStore());\n  }\n\n  handleChange = ({ target: { value, name } }) => {\n    this.setState({ [name]: value });\n  }\n\n  handleClick = () => {\n    fetch('https://opentdb.com/api_token.php?command=request')\n      .then((response) => response.json())\n      .then(({ token }) => {\n        const { history, dispatch } = this.props;\n        dispatch(saveUserInfo(this.state));\n        localStorage.setItem('token', token);\n        history.push('/game');\n      });\n  }\n\n  validateLogin = () => {\n    const { name, email } = this.state;\n    return !(name.length && email.length);\n  }\n\n  render() {\n    const { email, name } = this.state;\n    // const { history } = this.props;\n    return (\n      <main className=\"login-page\">\n        <section className=\"form-card\">\n          <img src={title} alt=\"Trivia title\" className=\"title\"/>\n          <form className=\"form\">\n            <input\n              type=\"text\"\n              className=\"name-input\"\n              data-testid=\"input-player-name\"\n              placeholder=\"TYPE YOUR NAME\"\n              name=\"name\"\n              value={ name }\n              autoComplete=\"off\"\n              onChange={ this.handleChange }\n            />\n            <input\n              type=\"email\"\n              className=\"email-input\"\n              data-testid=\"input-gravatar-email\"\n              placeholder=\"TYPE YOUR E-MAIL\"\n              name=\"email\"\n              value={ email }\n              autoComplete=\"off\"\n              onChange={ this.handleChange }\n            />\n            <button\n              type=\"button\"\n              disabled={ this.validateLogin() }\n              onClick={ this.handleClick }\n              className=\"login-button\"\n              data-testid=\"btn-play\"\n              >\n              PLAY\n            </button>\n          </form>\n        </section>\n        <img src={logo} alt=\"CyberTrivia\" className=\"logo\"/>\n        {/* <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => history.push('/settings') }\n        >\n          SETTINGS\n        </button> */}\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { addImageUrl } from '../redux/actions';\nimport './Header.css';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hash: '',\n    };\n  }\n\n  componentDidMount() {\n    const { gravatarEmail, dispatch } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    const url = `https://www.gravatar.com/avatar/${hash}`;\n    dispatch(addImageUrl(url));\n    this.setState({ hash });\n  }\n\n  render() {\n    const { hash } = this.state;\n    const { name, score } = this.props;\n    return (\n      <header className=\"header\">\n        <div className=\"img-div\">\n          <img\n            src={ `https://www.gravatar.com/avatar/${hash}` }\n            alt=\"Player avatar\"\n            data-testid=\"header-profile-picture\"\n            className=\"player-img\"\n          />\n          <p data-testid=\"header-player-name\" className=\"player-name\">\n            {' '}\n            {name}\n            {' '}\n          </p>\n        </div>\n        <p\n          data-testid=\"header-score\"\n          className=\"player-score\"\n        >\n          {`POINTS: ${score}`}\n        </p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GiHourglass } from 'react-icons/gi';\nimport Header from '../components/Header';\nimport { saveScore } from '../redux/actions';\nimport logo from '../images/CyberTrivia-cut.png';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      results: [],\n      index: 0,\n      classInfo: false,\n      timer: 30,\n      nextButton: false,\n      disabled: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestion();\n    this.intervalFunc();\n  }\n\n  componentDidUpdate() {\n    const { timer, index } = this.state;\n    const { history, name, picture, score } = this.props;\n    const player = { name, picture, score };\n    const maxIndex = 5;\n    if (timer === 0) {\n      clearInterval(this.intervalID);\n    }\n    if (index === maxIndex) {\n      if (!localStorage.getItem('ranking')) {\n        localStorage.setItem('ranking', JSON.stringify([]));\n      }\n      const playerInfo = JSON.parse(localStorage.getItem('ranking'));\n      localStorage.setItem('ranking', JSON.stringify([...playerInfo, player]));\n      history.push('/feedback');\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  intervalFunc = () => {\n    const ONE_SECOND = 1000;\n    this.intervalID = setInterval(() => {\n      const { timer } = this.state;\n      if (timer === 1) {\n        this.setState({ disabled: true, nextButton: true });\n      }\n      this.setState((prev) => ({\n        timer: prev.timer - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  fetchQuestion = () => {\n    const token = localStorage.getItem('token');\n    fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n      .then((response) => response.json())\n      .then((data) => {\n        const code = 3;\n        if (data.response_code === code) {\n          const { history } = this.props;\n          localStorage.removeItem('token');\n          history.push('/');\n        }\n        const { results } = data;\n        const n = 0.5;\n        const shuffledResults = results.map((item) => ({\n          ...item,\n          shuffledQuestions: [...item.incorrect_answers, item.correct_answer]\n            .sort(() => Math.random() - n),\n        }));\n        this.setState({ results: shuffledResults });\n      });\n  }\n\n  handleClick = (answer, dif) => {\n    const { timer } = this.state;\n    clearInterval(this.intervalID);\n    this.setState({ classInfo: true, nextButton: true, disabled: true });\n    const { dispatch } = this.props;\n    if (answer === 'right') {\n      const points = 10;\n      const hard = 3;\n      const medium = 2;\n      const easy = 1;\n      switch (dif) {\n      case 'hard':\n        dispatch(saveScore(points + (timer * hard)));\n        break;\n      case 'medium':\n        dispatch(saveScore(points + (timer * medium)));\n        break;\n      case 'easy':\n        dispatch(saveScore(points + (timer * easy)));\n        break;\n      default:\n      }\n    }\n  }\n\n  handleNext = () => {\n    this.setState((prev) => ({\n      index: prev.index + 1,\n      classInfo: false,\n      timer: 30,\n      nextButton: false,\n      disabled: false,\n    }), () => this.intervalFunc());\n  }\n\n  createMarkup = (question) => {\n    const p = document.createElement('textarea');\n    p.innerHTML = question;\n    return p.value.toUpperCase();\n  }\n\n  render() {\n    const { results, classInfo, index, timer, nextButton, disabled } = this.state;\n    return (\n      <main className=\"game-page\">\n        <Header />\n        <section className=\"main-section\">\n          <section className=\"game-section\">\n            <p className=\"timer\">\n              <GiHourglass className={ disabled ? \"hourglass stop\" : \"hourglass\" }/>\n              {' '}\n              {timer}\n            </p>\n            <img src={logo} alt=\"CyberTrivia\" className=\"game-logo\"/>\n            {Boolean(results.length)\n            && (\n              results.map((item, itemIndex) => {\n                if (index === itemIndex) {\n                  return (\n                    <div key={ item.question } className=\"question-div\">\n                      <p data-testid=\"question-category\">{item.category}</p>\n                      <p\n                        data-testid=\"question-text\"\n                        className=\"question-text\"\n                      >\n                        {this.createMarkup(item.question)}\n                      </p>\n                      <div data-testid=\"answer-options\" className=\"answer-options\">\n                        {item.shuffledQuestions.map((question, qIndex) => {\n                          if (item.correct_answer === question) {\n                            return (\n                              <button\n                                type=\"button\"\n                                data-testid=\"correct-answer\"\n                                key=\"correct-answer\"\n                                className={ classInfo ? 'btn correct-answer' : 'btn' }\n                                onClick={ () => this.handleClick('right', item.difficulty) }\n                                disabled={ disabled }\n                              >\n                                {this.createMarkup(question)}\n                              </button>\n                            );\n                          }\n                          return (\n                            <button\n                              key={ `wrong-answer-${qIndex}` }\n                              type=\"button\"\n                              data-testid={ `wrong-answer-${qIndex}` }\n                              className={ classInfo ? 'btn wrong-answer' : 'btn' }\n                              onClick={ () => this.handleClick('wrong') }\n                              disabled={ disabled }\n                            >\n                              {this.createMarkup(question)}\n                            </button>\n                          );\n                        })}\n                      </div>\n                      <button\n                        type=\"button\"\n                        data-testid=\"btn-next\"\n                        className={ nextButton ? \"next-btn\" : \"next-btn hidden\" }\n                        onClick={ this.handleNext }\n                      >\n                        NEXT\n                      </button>\n                    </div>\n                  );\n                }\n                return '';\n              })\n            )}\n          </section>\n        </section>\n      </main>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  picture: state.player.url,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return <h1 data-testid=\"settings-title\">Configurações</h1>;\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport './Feedback.css';\n\nclass Feedback extends React.Component {\n  render() {\n    const { assertions, score, history } = this.props;\n    const number = 3;\n    return (\n      <main className=\"feedback-page\">\n        <Header />\n        <section className=\"feedback-section\">\n          <section className=\"feedback-card\">\n            <div className=\"text-div\">\n              <p data-testid=\"feedback-text\" className=\"feedback-text\">\n                {assertions < number ? 'Could be better...' : 'Well Done!'}\n              </p>\n              <p className=\"feedback-assertions\">\n                You've got\n                {' '}\n                <span\n                  data-testid=\"feedback-total-question\"\n                >\n                  {assertions}\n                </span>\n                {' '}\n                { assertions === 1 ? \"question\" : \"questions\" } right!\n              </p>\n              <p className=\"feedback-points\">\n                <span data-testid=\"feedback-total-score\">{score}</span>\n                {' '}\n                points\n              </p>\n            </div>\n            <div className=\"btn-div\">\n              <button\n                type=\"button\"\n                onClick={ () => history.push('/') }\n                data-testid=\"btn-play-again\"\n              >\n                PLAY AGAIN\n              </button>\n              <button\n                type=\"button\"\n                onClick={ () => history.push('/ranking') }\n                data-testid=\"btn-ranking\"\n              >\n                RANKING\n              </button>\n            </div>\n          </section>\n        </section>\n      </main>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GiTrophy } from 'react-icons/gi';\nimport './Ranking.css';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('ranking')) {\n      localStorage.setItem('ranking', JSON.stringify([]));\n    }\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    ranking.sort((a, b) => b.score - a.score);\n    this.setState({ ranking });\n  }\n\n  render() {\n    const { history } = this.props;\n    const { ranking } = this.state;\n    return (\n      <main className=\"ranking-page\">\n        <GiTrophy\n          data-testid=\"ranking-title\"\n          className=\"ranking-logo\"\n          size={ 60 }\n        />\n        <section className=\"ranking-section\">\n          {ranking.map(({ picture, name, score }, index) => (\n            <div key={ picture + index } className=\"player-ranking\">\n              <div className=\"player-img-div\">\n                <img src={ picture } alt=\"Player avatar\" className=\"player-img\"/>\n              </div>\n              <p data-testid={ `player-name-${index}` }>{name}</p>\n              <p data-testid={ `player-score-${index}` } className=\"rk-score\">{score}</p>\n              <div className=\"underline\"></div>\n            </div>\n          ))}\n        </section>\n        <button\n          type=\"button\"\n          onClick={ () => history.push('/') }\n          data-testid=\"btn-go-home\"\n          className=\"play-btn\"\n        >\n          PLAY AGAIN\n        </button>\n      </main>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect()(Ranking);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","import { ADD_IMAGE_URL, SAVE_SCORE, SAVE_USER_INFO, RESET_STORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  url: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_USER_INFO:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n    };\n  case SAVE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.payload,\n      assertions: state.assertions + 1,\n    };\n  case ADD_IMAGE_URL:\n    return {\n      ...state,\n      url: action.payload,\n    };\n  case RESET_STORE:\n    return {\n      ...INITIAL_STATE,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { legacy_createStore as createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}